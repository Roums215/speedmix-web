// ---------- Gestion GPS et d√©tection de vitesse ---------- //

// Variables globales pour la simulation et le suivi GPS
let simulationInterval = null;
let gpsWatchId = null;
let autoSimulationInterval = null;

// Initialisation de la simulation GPS
window.initSimulation = function() {
    // Initialiser les valeurs de simulation
    DOM.simSpeedValue.textContent = `${DOM.simSpeedSlider.value} km/h`;
    DOM.simAccelValue.textContent = `${DOM.simAccelSlider.value} km/h/s`;
}

// D√©marrer la simulation de vitesse manuelle
window.startSimulation = function() {
    if (simulationInterval) clearInterval(simulationInterval);
    
    simulationInterval = setInterval(() => {
        // Utiliser les valeurs des sliders
        const simulatedSpeed = parseFloat(DOM.simSpeedSlider.value);
        const simulatedAcceleration = parseFloat(DOM.simAccelSlider.value);
        
        // Mettre √† jour l'√©tat de l'application
        updateSpeedData(simulatedSpeed, simulatedAcceleration);
    }, CONFIG.gps.updateInterval);
    
    APP_STATE.usingRealGPS = false;
    CONFIG.gps.simulationMode = true;
    updateStatusMessage("Mode simulation manuelle activ√©");
}

// Fonction pour d√©marrer la simulation automatique bas√©e sur le temps
window.startAutoSimulation = function() {
    if (autoSimulationInterval) clearInterval(autoSimulationInterval);
    if (simulationInterval) clearInterval(simulationInterval);
    
    // Variables locales pour stocker l'√©tat de l'auto-simulation
    let currentSpeed = 0;
    let targetSpeed = 0;
    let currentAccel = 0;
    let phase = 'acceleration'; // phases: acceleration, stable, deceleration
    let phaseDuration = 0;
    let phaseElapsed = 0;
    
    // Configurer le comportement de conduite
    const drivingProfile = {
        city: {
            maxSpeed: 50,
            acceleration: 10,
            deceleration: -8,
            stableDuration: 5000,  // ms
            stopDuration: 2000,    // ms
        },
        highway: {
            maxSpeed: 90,
            acceleration: 4,
            deceleration: -5,
            stableDuration: 15000,  // ms
            stopDuration: 0,        // ms
        }
    };
    
    // S√©lectionner un profil al√©atoirement ou en fonction du temps
    let currentProfile = Math.random() > 0.7 ? drivingProfile.highway : drivingProfile.city;
    
    autoSimulationInterval = setInterval(() => {
        // G√©rer les phases de conduite
        phaseElapsed += CONFIG.gps.updateInterval;
        
        // Transitions entre phases
        if (phaseElapsed >= phaseDuration) {
            phaseElapsed = 0;
            
            // S√©lection de la prochaine phase
            switch (phase) {
                case 'acceleration':
                    phase = 'stable';
                    phaseDuration = currentProfile.stableDuration;
                    break;
                case 'stable':
                    phase = 'deceleration';
                    phaseDuration = (currentSpeed / Math.abs(currentProfile.deceleration)) * 1000;
                    break;
                case 'deceleration':
                    if (currentSpeed <= 1) {
                        // Si on s'arr√™te compl√®tement
                        if (currentProfile.stopDuration > 0) {
                            phase = 'stopped';
                            phaseDuration = currentProfile.stopDuration;
                            currentSpeed = 0;
                        } else {
                            // Sinon, nouvelle acc√©l√©ration
                            phase = 'acceleration';
                            phaseDuration = (currentProfile.maxSpeed / currentProfile.acceleration) * 1000;
                            // Changer de profil al√©atoirement
                            currentProfile = Math.random() > 0.7 ? drivingProfile.highway : drivingProfile.city;
                        }
                    }
                    break;
                case 'stopped':
                    phase = 'acceleration';
                    phaseDuration = (currentProfile.maxSpeed / currentProfile.acceleration) * 1000;
                    break;
            }
            
            console.log(`Auto-sim: Nouvelle phase '${phase}', dur√©e: ${phaseDuration/1000}s`);
        }
        
        // Calcul de la nouvelle vitesse en fonction de la phase
        switch (phase) {
            case 'acceleration':
                currentAccel = currentProfile.acceleration;
                currentSpeed = Math.min(
                    currentProfile.maxSpeed, 
                    currentSpeed + (currentProfile.acceleration * (CONFIG.gps.updateInterval / 1000))
                );
                break;
            case 'stable':
                currentAccel = 0;
                // Petites variations al√©atoires
                currentSpeed += (Math.random() - 0.5) * 2;
                currentSpeed = Math.min(currentProfile.maxSpeed, Math.max(currentSpeed, currentProfile.maxSpeed * 0.9));
                break;
            case 'deceleration':
                currentAccel = currentProfile.deceleration;
                currentSpeed = Math.max(
                    0, 
                    currentSpeed + (currentProfile.deceleration * (CONFIG.gps.updateInterval / 1000))
                );
                break;
            case 'stopped':
                currentAccel = 0;
                currentSpeed = 0;
                break;
        }
        
        // Mettre √† jour l'interface
        updateSpeedData(currentSpeed, currentAccel);
    }, CONFIG.gps.updateInterval);
    
    APP_STATE.usingRealGPS = false;
    CONFIG.gps.simulationMode = true;
    updateStatusMessage("üöó Auto-simulation activ√©e üöó");
}

// Arr√™ter l'auto-simulation
window.stopAutoSimulation = function() {
    if (autoSimulationInterval) {
        clearInterval(autoSimulationInterval);
        autoSimulationInterval = null;
    }
}

// Arr√™ter la simulation GPS
window.stopSimulation = function() {
    if (simulationInterval) {
        clearInterval(simulationInterval);
        simulationInterval = null;
    }
}

// Mettre √† jour la vitesse simul√©e
window.updateSimulatedSpeed = function() {
    const value = DOM.simSpeedSlider.value;
    DOM.simSpeedValue.textContent = `${value} km/h`;
    
    if (CONFIG.gps.simulationMode) {
        updateSpeedData(parseFloat(value), parseFloat(DOM.simAccelSlider.value));
    }
}

// Mettre √† jour l'acc√©l√©ration simul√©e
window.updateSimulatedAcceleration = function() {
    const value = DOM.simAccelSlider.value;
    DOM.simAccelValue.textContent = `${value} km/h/s`;
    
    if (CONFIG.gps.simulationMode) {
        updateSpeedData(parseFloat(DOM.simSpeedSlider.value), parseFloat(value));
    }
}

// Auto-simulation d√©j√† d√©clar√©e en haut du fichier

// Basculer entre GPS r√©el, simulation manuelle et auto-simulation
// D√©claration globale pour accessibilit√© depuis app.js
window.toggleGPSMode = function() {
    // Si on √©tait en mode GPS r√©el
    if (APP_STATE.usingRealGPS) {
        // Passer au mode simulation manuelle
        stopGPSTracking();
        stopMotionTracking();
        stopAutoSimulation();
        startSimulation();
        DOM.btnSimGps.textContent = "Auto-Simulation";
        updateStatusMessage("Mode simulation manuelle activ√©");
    }
    // Si on √©tait en mode simulation manuelle
    else if (autoSimulationInterval === null) {
        // Passer au mode auto-simulation
        stopSimulation();
        startAutoSimulation();
        DOM.btnSimGps.textContent = "Utiliser GPS r√©el";
    }
    // Si on √©tait en mode auto-simulation
    else {
        // Passer au GPS r√©el
        stopSimulation();
        stopAutoSimulation();
        
        // D√©tection de plateforme pour message adapt√©
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        
        if (isIOS) {
            // Sur iOS, v√©rifiez si le navigateur est Safari
            updateStatusMessage("Demande d'acc√®s au GPS de l'iPhone...");
            
            // Sur iOS, on essaie d'abord de tester si la g√©olocalisation est d√©j√† accord√©e
            if (typeof navigator.permissions !== 'undefined') {
                navigator.permissions.query({name:'geolocation'}).then(function(result) {
                    if (result.state === 'prompt') {
                        alert("Safari va vous demander l'acc√®s √† votre position. Veuillez s√©lectionner 'Autoriser'.");
                    }
                });
            }
        } else {
            updateStatusMessage("Activation des capteurs de mouvement...");
        }
        
        // D√©marrer le suivi GPS/mouvement
        startMotionAndGPSTracking();
        DOM.btnSimGps.textContent = "Utiliser simulation";
    }
window.startMotionAndGPSTracking = function() {
    // Stopper les √©ventuelles instances pr√©c√©dentes
    stopGPSTracking();
    stopMotionTracking();
    stopSimulation();
    stopAutoSimulation();
    
    // Indiquer qu'on utilise les capteurs r√©els
    APP_STATE.usingRealGPS = true;
    CONFIG.gps.simulationMode = false;
    
    // D√©tection de la plateforme
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    const isHTTPS = location.protocol === 'https:';
    
    console.log("D√©marrage du suivi de mouvement");
    console.log("Appareil mobile:", isMobile ? "Oui" : "Non");
    console.log("iOS:", isIOS ? "Oui" : "Non");
    console.log("HTTPS:", isHTTPS ? "Oui" : "Non");
    console.log("User Agent:", navigator.userAgent);
    
    updateStatusMessage("üì± Activation des capteurs...");
    
    // Sur les appareils mobiles avec HTTPS, demander l'acc√®s √† l'acc√©l√©rom√®tre
    if (isMobile && isHTTPS) {
        if (window.DeviceMotionEvent && typeof window.DeviceMotionEvent.requestPermission === 'function') {
            // iOS 13+ n√©cessite une demande explicite
            window.DeviceMotionEvent.requestPermission()
                .then(response => {
                    if (response === 'granted') {
                        console.log("Permission acc√©l√©rom√®tre accord√©e");
                        startMotionTracking();
                    } else {
                        console.warn("Permission acc√©l√©rom√®tre refus√©e:", response);
                        updateStatusMessage("Acc√®s acc√©l√©rom√®tre refus√©");
                    }
                })
                .catch(error => {
                    console.error("Erreur acc√©l√©rom√®tre:", error);
                    // On lance quand m√™me le tracking acc√©l√©rom√®tre standard
                    startMotionTracking();
                });
        } else if (window.DeviceMotionEvent) {
            // Android et autres appareils sans besoin de permission explicite
            console.log("D√©marrage acc√©l√©rom√®tre standard");
            startMotionTracking();
        }
    } else if (window.DeviceMotionEvent) {
        // Si ce n'est pas un mobile ou pas HTTPS, on essaie quand m√™me l'acc√©l√©rom√®tre
        startMotionTracking();
    }
    
    // Toujours essayer de d√©marrer le suivi GPS (avec nouvelles options optimis√©es)
    startGPSTracking();
}

// D√©marrer un suivi GPS am√©lior√© sp√©cifiquement pour tous appareils
window.startEnhancedGPSTracking = function() {
    if (!navigator.geolocation) {
        updateStatusMessage("GPS non disponible sur cet appareil");
        startSimulation();
        return;
    }
    
    // M√©thode optimis√©e pour tous appareils, sp√©cialement mobiles
    // Ajouter un indicateur visuel que nous essayons d'obtenir la position
    updateStatusMessage("üìç Initialisation du GPS...");
    document.body.classList.add('requesting-gps');
    
    // D√©couvrir l'agent utilisateur pour le d√©bogage
    console.log("Agent utilisateur:", navigator.userAgent);
    console.log("Plateforme:", navigator.platform);
    console.log("Protocole:", window.location.protocol);
    
    // D√©tecter si on est sur un appareil mobile
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    // Options optimis√©es pour GPS en voiture (plus agressives sur mobile)
    const options = {
        enableHighAccuracy: true,       // Force l'utilisation du GPS haute pr√©cision
        timeout: isMobile ? 15000 : 30000,  // Temps d'attente adapt√©
        maximumAge: 0,                 // Toujours obtenir une nouvelle position
        distanceFilter: isMobile ? 0 : 1  // Plus sensible sur mobile
    };
    
    // Ajouter un message pour mobile
    if (isMobile && window.location.protocol === 'https:') {
        updateStatusMessage("üì± GPS mobile d√©tect√©! Initialisation...");
    }
    
    // Tenter d'obtenir une position une seule fois d'abord
    navigator.geolocation.getCurrentPosition(
        // Succ√®s - la permission est accord√©e
        function gpsPermissionSuccess(position) {
            document.body.classList.remove('requesting-gps');
            updateStatusMessage("‚úÖ GPS disponible!");
            console.log("GPS activ√© avec succ√®s!", position);
            
            // Utiliser les premi√®res donn√©es
            handlePositionSuccess(position);
            
            // D√©marrer le suivi continu
            gpsWatchId = navigator.geolocation.watchPosition(
                handlePositionSuccess,
                function(error) {
                    // Erreur pendant le suivi (moins grave)
                    console.warn("Erreur pendant le suivi GPS:", error);
                    updateStatusMessage("Attente du prochain signal GPS...");
                },
                options
            );
        },
        // √âchec - probl√®me de permission ou autre
        function gpsPermissionError(error) {
            document.body.classList.remove('requesting-gps');
            
            // Message d'erreur sp√©cifique pour iOS
            let message = "Probl√®me d'acc√®s au GPS";
            
            if (error.code === 1) { // PERMISSION_DENIED
                message = "‚ùå Permission GPS refus√©e. V√©rifiez les points suivants:";
                
                // Afficher des instructions sp√©cifiques pour iOS
                alert("Pour utiliser votre position sur Safari iPhone:\n\n" +
                      "1. Fermez cette bo√Æte de dialogue\n" + 
                      "2. Allez dans R√©glages iPhone > Confidentialit√© > Service de localisation > Safari\n" +
                      "3. S√©lectionnez 'Lorsque l'app est active'\n" +
                      "4. Revenez √† Safari et rechargez compl√®tement la page\n" +
                      "5. Appuyez √† nouveau sur 'R√©essayer GPS r√©el'\n\n" +
                      "Vous devez √©galement v√©rifier:\n" +
                      "- R√©glages > Safari > Tous les sites web > Acc√®s > Position");
            } else {
                alert("Erreur GPS (code " + error.code + "): " + error.message);
            }
            
            updateStatusMessage(message);
            startSimulation();
            DOM.btnSimGps.textContent = "R√©essayer GPS r√©el";
        },
        // Options adapt√©es √† tous appareils
        options
    );
}

// Arr√™ter le suivi GPS
window.stopGPSTracking = function() {
    if (gpsWatchId !== undefined) {
        navigator.geolocation.clearWatch(gpsWatchId);
        gpsWatchId = undefined;
    }
    APP_STATE.usingRealGPS = false;
}

// D√©marrage du suivi GPS standard
window.startGPSTracking = function() {
    if (!navigator.geolocation) {
        alert("La g√©olocalisation n'est pas prise en charge par votre navigateur.");
        updateStatusMessage("GPS non disponible!");
        return;
    }
    
    // V√©rifier et demander les permissions
    if (navigator.permissions) {
        navigator.permissions.query({ name: 'geolocation' })
            .then(permissionStatus => {
                console.log('√âtat permission GPS:', permissionStatus.state);
            });
    }
    
    updateStatusMessage("D√©marrage du GPS...");
    
    // R√©initialiser l'historique des vitesses et positions
    APP_STATE.speedHistory = [];
    APP_STATE.previousSpeed = 0;
    APP_STATE.previousPosition = null;
    APP_STATE.lastUpdate = Date.now();
    
    // D√©tecter si on est sur un appareil mobile
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    // Options de g√©olocalisation optimis√©es pour mobile
    const options = {
        enableHighAccuracy: true,       // Utiliser GPS haute pr√©cision (si disponible)
        timeout: isMobile ? 10000 : 15000, // D√©lai d'attente maximal
        maximumAge: 0,                 // Toujours utiliser des donn√©es r√©centes
        distanceFilter: isMobile ? 0 : 1  // Intervalle minimal de mise √† jour
    };
    
    // D√©marrer le suivi de position
    try {
        gpsWatchId = navigator.geolocation.watchPosition(
            handlePositionSuccess,
            (error) => {
                console.warn("Erreur GPS:", error.code, error.message);
                if (error.code === 1) { // PERMISSION_DENIED
                    updateStatusMessage("\u26a0Ô∏è Acc√®s GPS refus√©. V√©rifiez vos param√®tres.");
                } else {
                    updateStatusMessage("Erreur GPS: " + error.message);
                }
            },
            options
        );
        
        APP_STATE.usingRealGPS = true;
        CONFIG.gps.simulationMode = false;
        
        // Message de confirmation
        updateStatusMessage("GPS activ√© - en attente de signal...");        
    } catch (e) {
        console.error("Erreur lors du d√©marrage du GPS:", e);
        updateStatusMessage("Erreur d'activation GPS");
    }
}

// D√©tecter le mouvement √† l'aide de l'acc√©l√©rom√®tre
let motionSensorId = null;
window.startMotionTracking = function() {
    // Support des capteurs de mouvement
    if (window.DeviceMotionEvent) {
        console.log("D√©marrage suivi acc√©l√©rom√®tre");
        // Ajout un √©couteur d'√©v√©nements pour l'acc√©l√©rom√®tre
        window.addEventListener('devicemotion', handleDeviceMotion);
        updateStatusMessage("Capteurs de mouvement actifs");
    } else {
        console.warn("Acc√©l√©rom√®tre non disponible");
        updateStatusMessage("Capteurs de mouvement non disponibles");
    }
}

// Arr√™ter le suivi des capteurs de mouvement
window.stopMotionTracking = function() {
    if (motionSensorId) {
        clearInterval(motionSensorId);
        motionSensorId = null;
    }
    
    window.removeEventListener('devicemotion', handleDeviceMotion);
}

// G√©rer les donn√©es de l'acc√©l√©rom√®tre
window.handleDeviceMotion = function(event) {
    const currentTime = Date.now();
    
    // Obtenir les donn√©es d'acc√©l√©ration (avec et sans gravit√©)
    let acceleration = event.acceleration || { x: 0, y: 0, z: 0 };
    let accelerationGravity = event.accelerationIncludingGravity || { x: 0, y: 0, z: 0 };
    
    // Calculer la force nette de mouvement (sans gravit√© si disponible)
    let accelX = acceleration.x || 0;
    let accelY = acceleration.y || 0;
    let accelZ = acceleration.z || 0;
    
    // Si l'acc√©l√©ration sans gravit√© n'est pas disponible, essayer de la soustraire
    if (acceleration.x === null || acceleration.x === undefined) {
        accelX = accelerationGravity.x || 0;
        accelY = accelerationGravity.y || 0;
        accelZ = accelerationGravity.z || 0;
    }
    
    // Log des donn√©es d'acc√©l√©ration pour d√©bogage
    console.log(`Acc√©l√©rom√®tre: X=${accelX.toFixed(2)}, Y=${accelY.toFixed(2)}, Z=${accelZ.toFixed(2)}`);
    
    // Magnitude totale du mouvement
    const motionMagnitude = Math.sqrt(accelX * accelX + accelY * accelY + accelZ * accelZ);
    
    // Calcul direct de vitesse et acc√©l√©ration √† partir de l'acc√©l√©rom√®tre
    // Pour une d√©monstration plus r√©active
    const speedEstimate = motionMagnitude * 5; // Multiplication simple pour d√©monstration
    const accel = motionMagnitude;
    
    // Mise √† jour de l'interface
    updateSpeedData(speedEstimate, accel);
    updateStatusMessage(`üì± Acc√©l√©rom√®tre: ${speedEstimate.toFixed(1)} km/h`);
    
    // Affichage du d√©bogage
    console.log(`Motion: ${motionMagnitude.toFixed(2)} m/s¬≤ -> Vitesse: ${speedEstimate.toFixed(2)} km/h`);
}

// G√©rer une mise √† jour de position GPS r√©ussie
window.handlePositionSuccess = function(position) {
    const currentTime = Date.now();
    const coords = position.coords;
    let speedKmh = 0;
    let acceleration = 0;
    
    // D√©tecter si on est sur mobile et iOS pour adapter le traitement
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    // D√©tection de pr√©cision
    const accuracy = coords.accuracy || 0; // en m√®tres
    const isHighAccuracy = accuracy < 20; // moins de 20m = bonne pr√©cision
    
    console.log('Position GPS re√ßue:', position);
    console.log('Coords:', JSON.stringify({
        latitude: coords.latitude,
        longitude: coords.longitude,
        accuracy: coords.accuracy,
        speed: coords.speed,
        heading: coords.heading,
        timestamp: position.timestamp
    }));
    
    // M√©thode 1: Utiliser la vitesse fournie par l'API Geolocation (si disponible)
    // Sur mobile, la valeur coords.speed est g√©n√©ralement fiable
    if (coords.speed !== null && coords.speed !== undefined && coords.speed >= 0) {
        // La vitesse est fournie en m/s, convertir en km/h
        speedKmh = coords.speed * 3.6;
        console.log(`Vitesse GPS directe: ${speedKmh.toFixed(2)} km/h (${coords.speed} m/s) (pr√©cision: ${accuracy}m)`);
    } 
        
    // M√©thode 2: Calculer la vitesse √† partir des positions (si on a un historique)
    // On utilise toujours cette m√©thode comme compl√©ment/v√©rification
    if (APP_STATE.previousPosition) {
        const prevTime = APP_STATE.previousPosition.timestamp;
        const prevCoords = APP_STATE.previousPosition.coords;
            
        // Calculer la distance et la vitesse
        if (prevCoords && prevCoords.latitude && prevCoords.longitude) {
            // Calcul de la distance parcourue
            const distance = calculateDistance(
                prevCoords.latitude, prevCoords.longitude,
                coords.latitude, coords.longitude
            );
                
            // Calcul du temps √©coul√© en secondes
            const timeDiff = (currentTime - prevTime) / 1000;
                
            if (timeDiff > 0 && timeDiff < 10) { // Ignorer les mesures trop espac√©es
                // Vitesse en m√®tres par seconde, convertie en km/h
                const calculatedSpeed = distance / timeDiff; // m/s
                const calculatedSpeedKmh = calculatedSpeed * 3.6; // km/h
                    
                // Affichage en console pour d√©bogage
                console.log(`Vitesse calcul√©e: ${calculatedSpeedKmh.toFixed(2)} km/h, distance: ${distance.toFixed(2)}m, temps: ${timeDiff.toFixed(2)}s`);
                    
                // Si coords.speed est 0 ou faible mais qu'on d√©tecte un mouvement significatif
                // ou si coords.speed n'est pas disponible, utiliser notre calcul
                if ((speedKmh < 3 && calculatedSpeedKmh > 5) || coords.speed === null || coords.speed === undefined) {
                    console.log('Correction: utilisation de la vitesse calcul√©e au lieu de la valeur GPS');
                    speedKmh = calculatedSpeedKmh;
                        
                    // Limiter les pics extr√™mes (filtrer les erreurs GPS)
                    if (speedKmh > 150) {
                        speedKmh = Math.min(speedKmh, APP_STATE.previousSpeed * 1.5);
                        console.log(`Limitation d'un pic de vitesse √† ${speedKmh.toFixed(1)} km/h`);
                    }
                }
                    
                // Moyenne glissante pour lisser les valeurs
                if (APP_STATE.previousSpeed > 0) {
                    speedKmh = (speedKmh + APP_STATE.previousSpeed) / 2;
                }
            }
        }
    }
        
    // Calculer l'acc√©l√©ration
    if (APP_STATE.lastUpdate) {
        const timeDiff = (currentTime - APP_STATE.lastUpdate) / 1000;
        if (timeDiff > 0) {
            acceleration = (speedKmh - APP_STATE.previousSpeed) / timeDiff;
                
            // Lisser l'acc√©l√©ration pour √©viter les pics trop brutaux
            if (Math.abs(acceleration) > 20) {
                acceleration = Math.sign(acceleration) * 20;
            }
        }
    }
    const timeDiffSecs = (currentTime - (APP_STATE.lastUpdate || currentTime)) / 1000;
    if (timeDiffSecs > 0 && APP_STATE.previousSpeed !== undefined) {
        // Acc√©l√©ration instantan√©e
        acceleration = (speedKmh - APP_STATE.previousSpeed) / timeDiffSecs;
        
        // Limite plus strict pour iOS car l'acc√©l√©rom√®tre n'est pas disponible
        const accelerationLimit = isIOS ? 20 : 30;
        if (Math.abs(acceleration) > accelerationLimit) {
            acceleration = Math.sign(acceleration) * accelerationLimit;
        }
    }
    
    // Mettre √† jour l'√©tat et les donn√©es
    APP_STATE.previousPosition = {
        coords: {
            latitude: coords.latitude,
            longitude: coords.longitude,
            accuracy: coords.accuracy
        },
        timestamp: currentTime
    };
    APP_STATE.lastUpdate = currentTime;
    
    // Mettre √† jour l'interface
    updateSpeedData(speedKmh, acceleration);
    
    // Message d'√©tat plus complet
    if (isIOS) {
        updateStatusMessage(`GPS actif ‚ñ∂ ${speedKmh.toFixed(1)} km/h [${acceleration.toFixed(1)} km/h/s] (pr√©cision: ${accuracy.toFixed(0)}m)`);
    } else {
        updateStatusMessage(`GPS actif ‚ñ∂ ${speedKmh.toFixed(1)} km/h [${acceleration.toFixed(1)} km/h/s]`);
    }
    
    // Mettre √† jour directement l'affichage de la vitesse aussi
    DOM.speed.textContent = `${speedKmh.toFixed(1)} `;
}

// Calcul de la distance entre deux points GPS (formule de Haversine)
window.calculateDistance = function(lat1, lon1, lat2, lon2) {
    // Conversion des latitudes/longitudes de degr√©s en radians
    const R = 6371000; // Rayon de la Terre en m√®tres
    const phi1 = lat1 * Math.PI / 180;
    const phi2 = lat2 * Math.PI / 180;
    const deltaPhi = (lat2 - lat1) * Math.PI / 180;
    const deltaLambda = (lon2 - lon1) * Math.PI / 180;

    const a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +
            Math.cos(phi1) * Math.cos(phi2) *
            Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c; // en m√®tres

    return distance;
}

// G√©rer une erreur de position GPS
window.handlePositionError = function(error) {
    let errorMessage;
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    
    switch(error.code) {
        case 1: // PERMISSION_DENIED
            errorMessage = "Permission GPS refus√©e";
            break;
        case 2: // POSITION_UNAVAILABLE
            errorMessage = "Position GPS indisponible";
            break;
        case 3: // TIMEOUT
            errorMessage = "D√©lai d'attente GPS d√©pass√©";
            break;
        default:
            errorMessage = "Erreur GPS inconnue";
    }
    
    updateStatusMessage(`‚ùå ${errorMessage}`);
    console.error('Erreur GPS:', error);
    
    if (error.code === 1) { // PERMISSION_DENIED
        if (isIOS) {
            // Message sp√©cifique pour iOS
            alert("Safari a besoin de votre permission pour acc√©der √† votre position. Veuillez l'activer dans R√©glages > Safari > Position, puis rafra√Æchir la page.");
        } else {
            alert("Pour utiliser la vitesse r√©elle, autorisez l'acc√®s √† votre position dans les param√®tres de votre navigateur, puis rafra√Æchissez la page.");
        }
    } else if (error.code === 2) { // POSITION_UNAVAILABLE
        if (isIOS) {
            alert("Impossible d'obtenir votre position. Assurez-vous d'√™tre en ext√©rieur, que les services de localisation sont activ√©s dans R√©glages, et que Safari a la permission d'acc√©der √† votre position.");
        } else {
            alert("Signal GPS indisponible. Assurez-vous d'√™tre en ext√©rieur ou pr√®s d'une fen√™tre.");
        }
    } else if (error.code === 3 && isIOS) { // TIMEOUT sur iOS
        alert("La r√©cup√©ration de votre position a pris trop de temps. V√©rifiez que les services de localisation sont activ√©s et r√©essayez.");
    }
    
    // Revenir au mode simulation
    stopGPSTracking();
    startSimulation();
    DOM.btnSimGps.textContent = "R√©essayer GPS r√©el";
}

// ---------- Analyse du comportement de conduite ---------- //

// Mettre √† jour les donn√©es de vitesse et analyser le comportement
window.updateSpeedData = function(speed, acceleration) {
    // Enregistrer les donn√©es actuelles
    APP_STATE.currentSpeed = speed;
    APP_STATE.currentAcceleration = acceleration;
    
    // Ajouter √† l'historique
    APP_STATE.speedHistory.push({
        speed,
        acceleration,
        timestamp: Date.now()
    });
    
    // Limiter la taille de l'historique
    if (APP_STATE.speedHistory.length > 20) {
        APP_STATE.speedHistory.shift();
    }
    
    // Analyser la stabilisation
    APP_STATE.isStabilized = isSpeedStabilized();
    
    // Mettre √† jour l'affichage
    updateSpeedDisplay();
    
    // Analyser le comportement et adapter la musique si n√©cessaire
    if (APP_STATE.isPlaying) {
        const behavior = analyzeBehavior();
        adaptMusicToSpeed(behavior);
    }
    
    // Mettre √† jour pour le prochain calcul
    APP_STATE.previousSpeed = speed;
}

// V√©rifier si la vitesse s'est stabilis√©e
window.isSpeedStabilized = function() {
    if (APP_STATE.speedHistory.length < 3) return false;
    
    const { threshold, duration } = CONFIG.stabilization;
    const currentTime = Date.now();
    
    // R√©cup√©rer l'historique pertinent pour la dur√©e sp√©cifi√©e
    const relevantHistory = APP_STATE.speedHistory.filter(
        item => (currentTime - item.timestamp) <= duration * 1000
    );
    
    if (relevantHistory.length < 3) return false;
    
    // V√©rifier si la variation de vitesse est inf√©rieure au seuil
    const speeds = relevantHistory.map(item => item.speed);
    const minSpeed = Math.min(...speeds);
    const maxSpeed = Math.max(...speeds);
    
    return (maxSpeed - minSpeed) <= threshold;
}

// Analyser le comportement de conduite
window.analyzeBehavior = function() {
    const isAccelerating = APP_STATE.currentAcceleration > CONFIG.acceleration.threshold;
    const speedCategory = categorizeSpeed(APP_STATE.currentSpeed);
    
    // Calculer un score d'√©nergie (0-100) pour l'intensit√© musicale
    const energyScore = calculateEnergyScore(APP_STATE.currentSpeed, APP_STATE.currentAcceleration);
    
    return {
        isAccelerating,
        isStabilized: APP_STATE.isStabilized,
        speedCategory,
        energyScore,
        speed: APP_STATE.currentSpeed,
        acceleration: APP_STATE.currentAcceleration
    };
}

// Cat√©goriser la vitesse
window.categorizeSpeed = function(speed) {
    if (speed < 20) return 'very_low';
    if (speed < 50) return 'low';
    if (speed < 80) return 'medium';
    return 'high';
}

// Calculer le score d'√©nergie pour adapter l'intensit√© musicale
window.calculateEnergyScore = function(speed, acceleration) {
    // Score de base li√© √† la vitesse (0-70)
    const speedScore = Math.min(70, (speed / 120) * 70);
    
    // Bonus d'acc√©l√©ration (0-30)
    const accelerationBonus = Math.min(30, Math.max(0, acceleration) * 3);
    
    // Score total (0-100)
    return Math.min(100, Math.round(speedScore + accelerationBonus));
}

// Mettre √† jour l'affichage de la vitesse
window.updateSpeedDisplay = function() {
    // Vitesse
    DOM.speed.textContent = `${APP_STATE.currentSpeed.toFixed(1)} `;
    
    // Acc√©l√©ration
    DOM.acceleration.textContent = `${APP_STATE.currentAcceleration.toFixed(1)} km/h/s`;
    
    // √âtat
    DOM.status.textContent = APP_STATE.isStabilized ? "Stable" : "Variable";
    
    // Style de vitesse selon l'√©tat
    DOM.speed.className = 'speed-value';
    
    if (APP_STATE.currentAcceleration > CONFIG.acceleration.threshold) {
        DOM.speedStatus.textContent = 'üöÄ Acc√©l√©ration!';
        DOM.speed.classList.add('accelerating');
    } else if (APP_STATE.isStabilized) {
        DOM.speedStatus.textContent = 'üéµ Vitesse stabilis√©e';
        DOM.speed.classList.add('stabilized');
    } else {
        DOM.speedStatus.textContent = 'üöó En mouvement';
    }
}

// Mettre √† jour le message d'√©tat
window.updateStatusMessage = function(message) {
    if (DOM.status) {
        DOM.status.textContent = message;
    } else {
        console.log("Message d'√©tat: " + message);
    }
}

// Fonction pour adapter la musique √† la vitesse
window.adaptMusicToSpeed = function(behavior) {
    // Cette fonction est appel√©e par updateSpeedData
    // Elle doit √™tre d√©finie pour √©viter les erreurs
    if (!APP_STATE.isPlaying || APP_STATE.tracks.length === 0) {
        return;
    }
    
    console.log("Adaptation musicale:", behavior);
    
    // Vous pouvez impl√©menter ici la logique d'adaptation musicale
    // selon la vitesse et l'acc√©l√©ration
}

// Formater le temps au format mm:ss
window.formatTime = function(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
}
